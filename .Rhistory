z = (106 - 102) / 14 * 0.4
12 ** 3
ppois?
x
?ppois
ppois(12, 0.31)
ppois(12, 0.31, lower.tail = F)
ppois(12, 1/0.31, lower.tail = F)
ppois(q=12, 0.3125, lower.tail = F)
225/24
225/24/60
225/24/60*2
dpois(12, 0.31)
?dbinom()
?dbinom(0, 4, 0.85)
dbinom(0, 4, 0.85)
pbinom(0, 4, 0.85, lower.tail = F)
pbinom(1, 4, 0.85, lower.tail = F)
pbinom(2, 4, 0.85, lower.tail = F)
pbinom(3, 4, 0.85, lower.tail = F)
pbinom(4, 4, 0.85, lower.tail = F)
pbinom(0, 4, 0.85, lower.tail = F)
dbinom(4, 4, 0.85)
dpois(12, 225/60*30)
dpois(12, 225/60*2)
dpois(0, 225/60*3)
library(tidyverse)
data <- readr::read_tsv('http://vulstats.ucsd.edu/data/bodyfat.data2.txt')
data <- data %>% select(-density)
data <- data %>% select(-density)
data <- data %>% filter(height > 36)
glimpse(data)
data = data %>%
mutate(BMI = (weight/2.2)/(height*0.0254)^2, # combine weight and height into BMI
WeightToHeight = weight/height,
H2A = height/abdomen)
m <- lm(data = data, bf.percent ~ BMI)
m
predict.lm(m,
newdata = data.frame(MBI = 25),
interval = "confidence")
predict.lm(m,
newdata = data.frame(BMI = 25),
interval = "confidence")
predict.lm(m2,
newdata = data.frame(WeightToHeight = 2),
interval = 'prediction')
m2 <- lm(data = data, bf.percent ~ WeightToHeight)
predict.lm(m2,
newdata = data.frame(WeightToHeight = 2),
interval = 'prediction')
m2
summary(m2)
m.all = lm(data = data, bf.percent ~ .) # include all features in model
m.0 = lm(data = data, bf.percent~1)
m.step = step(m.0,
direction = 'forward',
scope=formula(m.all))
anova(m.all)
data %>%
cor() %>%
as_tibble(rownames = 'X1') %>%
pivot_longer(-X1, names_to = 'X2', values_to = 'r') %>%
ggplot(aes(x=X1,y=X2,fill=r))+
geom_tile()+
scale_fill_gradient2()+
theme_minimal()+
theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5))
library(tidyverse)
library(tidyverse)
load(url('https://vulstats.ucsd.edu/labs/201a-2020/05/lab5.RData'))
setwd("E:/UCSD/2020-2021 Senior/FA 20/PSYC 201A/Lecture Material/Week 5")
glimpse(states)
states <- states %>% select(!state)
cnames <- colnames(states) # get all the column names
cnames <- cnames[cnames != 'margin'] # exclude margin
# combn(cnames, 2, simplify = F) # get all the possiboe combinations of 2 vectors
pred.sets <- flatten(map(1:length(cnames), ~ combn(cnames, ., simplify = F))) # creating a list of all possible subsets
model.from.set <- function(pred.set) { # build a formula out of all combinations
.formula <- as.formula(paste('margin ~', paste(pred.set, collapse = '+')))
lm(.formula, states)
}
adj.rsq <- function(pred.set) summary(model.from.set(pred.set))$adj.r.squared
adj.rsqs <- map_dbl(pred.sets, adj.rsq)
best.set.adj.rsq <- pred.sets[adj.rsqs == max(adj.rsqs)][[1]]
m.adj.rsq <- model.from.set(best.set.adj.rsq)
summary(m.adj.rsq)
setwd("E:/UCSD/2020-2021 Senior/PSYC 201 Project/covid_project")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
svi.raw <- read_csv("./datasets/SVI2018_US_COUNTY.csv")
svi.raw %>%
select(STATE,
COUNTY,
FIPS,
AREA_SQMI,
E_TOTPOP,
E_HU,
E_HH,
E_POV,
E_UNEMP,
E_PCI,
E_NOHSDP,
E_AGE65,
E_DISABL,
E_MINRTY,
E_LIMENG,
E_MOBILE,
E_CROWD,
E_NOVEH,
E_GROUPQ,
E_UNINSUR) -> svi.data
svi.selected <- svi.data
svi.selected[svi.selected == "-999"] <- NA
# only New Mexico has NA responses for est. PCI, poverty, and unemployment
svi.selected %>%
# PCI is per capita income
# calculating total income to derive statewide per capita income later
mutate(income = E_TOTPOP * E_PCI) %>%
group_by(STATE) %>%
summarise(area = sum(AREA_SQMI),
# aggregating to state level
total.population = sum(E_TOTPOP),
total.housing.units = sum(E_HU),
total.household = sum(E_HH),
total.poverty = sum(E_POV),
total.unemployed = sum(E_UNEMP),
total.income = sum(income),
# dividing into statewide per capita
total.capita = total.income/total.population,
total.no.HS = sum(E_NOHSDP),
total.age65 = sum(E_AGE65),
total.disabled = sum(E_DISABL),
total.minority = sum(E_MINRTY),
total.eng.proficiency = sum(E_LIMENG),
total.mobile = sum(E_MOBILE),
total.crowd = sum(E_CROWD),
total.no.vehicle = sum(E_NOVEH),
total.institutionalized = sum(E_GROUPQ),
total.uninsured = sum(E_UNINSUR)) -> svi.state
svi.state %>%
mutate(population.density = total.population/area,
poverty.rate = total.poverty/total.population,
unemployed.rate = total.unemployed/total.population,
per.capita = total.capita,
no.HS.rate = total.no.HS/total.population,
age65.rate = total.age65/total.population,
disabled.rate = total.disabled/total.population,
minority.rate = total.minority/total.population,
poor.English.rate = total.eng.proficiency/total.population,
mobile.home.rate = total.mobile/total.population,
household.crowd.rate = total.crowd/total.population,
no.vehicle.rate = total.no.vehicle/total.population,
institutionalized.rate = total.institutionalized/total.population,
uninsured.rate = total.uninsured/total.population) -> svi.state
unemployment.2020.raw <- read_csv("./datasets/unemployment2020.csv")
unemployment.2020.data <-
unemployment.2020.raw[,colSums(is.na(unemployment.2020.raw))<nrow(unemployment.2020.raw)]
unemployment.2020 <- na.omit(unemployment.2020.data)
svi.state %>%
select(STATE, unemployed.rate) -> unemployment.2018
svi.state %>%
select(-unemployed.rate) -> svi.state
svi.state$STATE <- str_to_title(svi.state$STATE[1:51])
# write.csv(svi.state,"C:\\Users\\fan\\Desktop\\preliminary cdc data version 1.csv")
unemployment <- cbind(unemployment.2018, unemployment.2020) %>%
mutate(unemployed.rate = round(unemployed.rate * 100, digit = 1)) %>%
rename(unemployment.rate.2018 = unemployed.rate) %>%
select(-c(STATE)) %>% # select everything but
rename(state = State,
Jan = Jan.,
Feb = Feb.,
Mar = March,
Apr = April,
May = May,
Jun = June,
Jul = July,
Aug = Aug.,
Sep = Sept.) %>%
pivot_longer(-c(state, unemployment.rate.2018),
names_to = "month",
values_to = "unemployment.rate.2020") %>%
mutate(month = match(month, month.abb))
unemployments <- unemployment[c(2, 3, 1, 4)]
# write.csv(unemployments,"E:/UCSD/2020-2021 Senior/PSYC 201 Project/CDC + Employment Data/unemployment rate version 1.csv")
covid.death.raw <- read_csv("./datasets/csse_covid_19_time_series/time_series_covid19_deaths_US.csv")
# glimpse(covid.death.raw)
# Exclude these states
# American Samoa, Diamond Princess, Grand Princess, Guam, Northern Mariana Islands, Puerto Rico, Virgin Islands
covid.death <- covid.death.raw %>%
select(-c(UID, iso2, iso3, code3, FIPS, Admin2, Country_Region, Lat, Long_, Combined_Key)) %>%
rename(state = Province_State, population = Population) %>%
group_by(state) %>% # Specify group indicator
summarise(across(everything(), sum)) %>% # Specify column
pivot_longer(-c(state, population),
names_to = "date",
values_to = "cumulative.death.cases") %>%
filter(state %in% c(state.name, "District of Columbia")) %>%
group_by(state) %>%
mutate(death.cases = cumulative.death.cases - lag(cumulative.death.cases),
date = as.Date(date, format = "%m/%d/%y"),
month = match(months(date), month.name),
death.cases = replace_na(death.cases, 0)) # %>%
# mutate_if(death.cases < 0, )
covid.deaths <- covid.death[c(1, 2, 3, 6, 4, 5)]
View(covid.deaths)
View(covid.deaths)
# Exclude these states
# American Samoa, Diamond Princess, Grand Princess, Guam, Northern Mariana Islands, Puerto Rico, Virgin Islands
covid.death <- covid.death.raw %>%
select(-c(UID, iso2, iso3, code3, FIPS, Admin2, Country_Region, Lat, Long_, Combined_Key)) %>%
rename(state = Province_State, population = Population) %>%
group_by(state) %>% # Specify group indicator
summarise(across(everything(), sum)) %>% # Specify column
pivot_longer(-c(state, population),
names_to = "date",
values_to = "cumulative.death.cases") %>%
filter(state %in% c(state.name, "District of Columbia")) %>%
group_by(state) %>%
mutate_if(cumulative.death.cases < lag(cumulative.death.cases), lag(cumulative.death.cases)) %>%
mutate(death.cases = cumulative.death.cases - lag(cumulative.death.cases),
date = as.Date(date, format = "%m/%d/%y"),
month = match(months(date), month.name),
death.cases = replace_na(death.cases, 0))
# Exclude these states
# American Samoa, Diamond Princess, Grand Princess, Guam, Northern Mariana Islands, Puerto Rico, Virgin Islands
covid.death <- covid.death.raw %>%
select(-c(UID, iso2, iso3, code3, FIPS, Admin2, Country_Region, Lat, Long_, Combined_Key)) %>%
rename(state = Province_State, population = Population) %>%
group_by(state) %>% # Specify group indicator
summarise(across(everything(), sum)) %>% # Specify column
pivot_longer(-c(state, population),
names_to = "date",
values_to = "cumulative.death.cases") %>%
filter(state %in% c(state.name, "District of Columbia")) %>%
group_by(state) %>%
mutate_if(cumulative.death.cases < lag(cumulative.death.cases), lag(cumulative.death.cases)) %>%
mutate(death.cases = cumulative.death.cases - lag(cumulative.death.cases),
date = as.Date(date, format = "%m/%d/%y"),
month = match(months(date), month.name),
death.cases = replace_na(death.cases, 0))
# Exclude these states
# American Samoa, Diamond Princess, Grand Princess, Guam, Northern Mariana Islands, Puerto Rico, Virgin Islands
covid.death <- covid.death.raw %>%
select(-c(UID, iso2, iso3, code3, FIPS, Admin2, Country_Region, Lat, Long_, Combined_Key)) %>%
rename(state = Province_State, population = Population) %>%
group_by(state) %>% # Specify group indicator
summarise(across(everything(), sum)) %>% # Specify column
pivot_longer(-c(state, population),
names_to = "date",
values_to = "cumulative.death.cases") %>%
filter(state %in% c(state.name, "District of Columbia")) %>%
group_by(state) %>%
mutate(death.cases = cumulative.death.cases - lag(cumulative.death.cases),
date = as.Date(date, format = "%m/%d/%y"),
month = match(months(date), month.name),
death.cases = replace_na(death.cases, 0))
covid.deaths <- covid.death[c(1, 2, 3, 6, 4, 5)]
# Exclude these states
# American Samoa, Diamond Princess, Grand Princess, Guam, Northern Mariana Islands, Puerto Rico, Virgin Islands
covid.death <- covid.death.raw %>%
select(-c(UID, iso2, iso3, code3, FIPS, Admin2, Country_Region, Lat, Long_, Combined_Key)) %>%
rename(state = Province_State, population = Population) %>%
group_by(state) %>% # Specify group indicator
summarise(across(everything(), sum)) %>% # Specify column
pivot_longer(-c(state, population),
names_to = "date",
values_to = "cumulative.death.cases") %>%
filter(state %in% c(state.name, "District of Columbia")) %>%
group_by(state) %>%
mutate_if(cumulative.death.cases < lag(cumulative.death.cases), lag(cumulative.death.cases)) %>%
mutate(death.cases = cumulative.death.cases - lag(cumulative.death.cases),
date = as.Date(date, format = "%m/%d/%y"),
month = match(months(date), month.name),
death.cases = replace_na(death.cases, 0))
# Exclude these states
# American Samoa, Diamond Princess, Grand Princess, Guam, Northern Mariana Islands, Puerto Rico, Virgin Islands
covid.death <- covid.death.raw %>%
select(-c(UID, iso2, iso3, code3, FIPS, Admin2, Country_Region, Lat, Long_, Combined_Key)) %>%
rename(state = Province_State, population = Population) %>%
group_by(state) %>% # Specify group indicator
summarise(across(everything(), sum)) %>% # Specify column
pivot_longer(-c(state, population),
names_to = "date",
values_to = "cumulative.death.cases") %>%
filter(state %in% c(state.name, "District of Columbia")) %>%
group_by(state) %>%
mutate_if(cumulative.death.cases < lag(cumulative.death.cases), lag(cumulative.death.cases)) # %>%
# Exclude these states
# American Samoa, Diamond Princess, Grand Princess, Guam, Northern Mariana Islands, Puerto Rico, Virgin Islands
covid.death <- covid.death.raw %>%
select(-c(UID, iso2, iso3, code3, FIPS, Admin2, Country_Region, Lat, Long_, Combined_Key)) %>%
rename(state = Province_State, population = Population) %>%
group_by(state) %>% # Specify group indicator
summarise(across(everything(), sum)) %>% # Specify column
pivot_longer(-c(state, population),
names_to = "date",
values_to = "cumulative.death.cases") %>%
filter(state %in% c(state.name, "District of Columbia")) %>%
group_by(state) %>%
mutate_if(cumulative.death.cases < lag(cumulative.death.cases), 0) # %>%
# Exclude these states
# American Samoa, Diamond Princess, Grand Princess, Guam, Northern Mariana Islands, Puerto Rico, Virgin Islands
covid.death <- covid.death.raw %>%
select(-c(UID, iso2, iso3, code3, FIPS, Admin2, Country_Region, Lat, Long_, Combined_Key)) %>%
rename(state = Province_State, population = Population) %>%
group_by(state) %>% # Specify group indicator
summarise(across(everything(), sum)) %>% # Specify column
pivot_longer(-c(state, population),
names_to = "date",
values_to = "cumulative.death.cases") %>%
filter(state %in% c(state.name, "District of Columbia")) %>%
group_by(state) %>%
mutate_if(cumulative.death.cases < lag(cumulative.death.cases), lag(cumulative.death.cases)) # %>%
covid.death.raw %>%
select(-c(UID, iso2, iso3, code3, FIPS, Admin2, Country_Region, Lat, Long_, Combined_Key)) %>%
rename(state = Province_State, population = Population) %>%
group_by(state) %>% # Specify group indicator
summarise(across(everything(), sum)) %>% # Specify column
pivot_longer(-c(state, population),
names_to = "date",
values_to = "cumulative.death.cases") %>%
filter(state %in% c(state.name, "District of Columbia")) %>%
group_by(state)
# Exclude these states
# American Samoa, Diamond Princess, Grand Princess, Guam, Northern Mariana Islands, Puerto Rico, Virgin Islands
covid.death <- covid.death.raw %>%
select(-c(UID, iso2, iso3, code3, FIPS, Admin2, Country_Region, Lat, Long_, Combined_Key)) %>%
rename(state = Province_State, population = Population) %>%
group_by(state) %>% # Specify group indicator
summarise(across(everything(), sum)) %>% # Specify column
pivot_longer(-c(state, population),
names_to = "date",
values_to = "cumulative.death.cases") %>%
filter(state %in% c(state.name, "District of Columbia")) %>%
group_by(state) %>%
mutate(cumulative.death.cases = ifelse(cumulative.death.cases < lag(cumulative.death.cases),
lag(cumulative.death.cases), # if smaller than previous
cumulative.death.cases), # if not
death.cases = cumulative.death.cases - lag(cumulative.death.cases),
date = as.Date(date, format = "%m/%d/%y"),
month = match(months(date), month.name),
death.cases = replace_na(death.cases, 0))
covid.deaths <- covid.death[c(1, 2, 3, 6, 4, 5)]
View(covid.deaths)
# Exclude these states
# American Samoa, Diamond Princess, Grand Princess, Guam, Northern Mariana Islands, Puerto Rico, Virgin Islands
covid.death <- covid.death.raw %>%
select(-c(UID, iso2, iso3, code3, FIPS, Admin2, Country_Region, Lat, Long_, Combined_Key)) %>%
rename(state = Province_State, population = Population) %>%
group_by(state) %>% # Specify group indicator
summarise(across(everything(), sum)) %>% # Specify column
pivot_longer(-c(state, population),
names_to = "date",
values_to = "cumulative.death.cases") %>%
filter(state %in% c(state.name, "District of Columbia")) %>%
group_by(state) %>%
mutate(death.cases = cumulative.death.cases - lag(cumulative.death.cases),
date = as.Date(date, format = "%m/%d/%y"),
month = match(months(date), month.name),
death.cases = replace_na(death.cases, 0))
# fix negative cumulative cases
while (any(covid.death$death.cases < 0)) {
covid.death <- covid.death %>%
mutate(cumulative.death.cases = ifelse(cumulative.death.cases < lag(cumulative.death.cases),
lag(cumulative.death.cases), # if smaller than previous
cumulative.death.cases), # if not
death.cases = cumulative.death.cases - lag(cumulative.death.cases))
}
any(c(T, F, F))
any(covid.death$death.cases < 0)
covid.death$death.cases < 0
covid.death <- covid.death.raw %>%
select(-c(UID, iso2, iso3, code3, FIPS, Admin2, Country_Region, Lat, Long_, Combined_Key)) %>%
rename(state = Province_State, population = Population) %>%
group_by(state) %>% # Specify group indicator
summarise(across(everything(), sum)) %>% # Specify column
pivot_longer(-c(state, population),
names_to = "date",
values_to = "cumulative.death.cases") %>%
filter(state %in% c(state.name, "District of Columbia")) %>%
group_by(state) %>%
mutate(death.cases = cumulative.death.cases - lag(cumulative.death.cases),
date = as.Date(date, format = "%m/%d/%y"),
month = match(months(date), month.name),
death.cases = replace_na(death.cases, 0))
covid.death$death.cases < 0
any(covid.death$death.cases < 0)
# Exclude these states
# American Samoa, Diamond Princess, Grand Princess, Guam, Northern Mariana Islands, Puerto Rico, Virgin Islands
covid.death <- covid.death.raw %>%
select(-c(UID, iso2, iso3, code3, FIPS, Admin2, Country_Region, Lat, Long_, Combined_Key)) %>%
rename(state = Province_State, population = Population) %>%
group_by(state) %>% # Specify group indicator
summarise(across(everything(), sum)) %>% # Specify column
pivot_longer(-c(state, population),
names_to = "date",
values_to = "cumulative.death.cases") %>%
filter(state %in% c(state.name, "District of Columbia")) %>%
group_by(state) %>%
mutate(death.cases = cumulative.death.cases - lag(cumulative.death.cases),
date = as.Date(date, format = "%m/%d/%y"),
month = match(months(date), month.name),
death.cases = replace_na(death.cases, 0))
# fix negative cumulative cases
while (any(covid.death$death.cases < 0)) {
covid.death <- covid.death %>%
mutate(cumulative.death.cases = ifelse(cumulative.death.cases < lag(cumulative.death.cases),
lag(cumulative.death.cases), # if smaller than previous
cumulative.death.cases), # if not
death.cases = cumulative.death.cases - lag(cumulative.death.cases),
death.cases = replace_na(death.cases, 0))
}
covid.deaths <- covid.death[c(1, 2, 3, 6, 4, 5)]
covid.confirmed.raw <- read_csv("./datasets/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv")
# glimpse(covid.confirmed.raw)
covid.confirmed <- covid.confirmed.raw %>%
select(-c(UID, iso2, iso3, code3, FIPS, Admin2, Country_Region, Lat, Long_, Combined_Key)) %>%
rename(state = Province_State) %>%
group_by(state) %>% # Specify group indicator
summarise(across(everything(), sum)) %>% # Specify column
pivot_longer(-c(state),
names_to = "date",
values_to = "cumulative.confirmed.cases") %>%
filter(state %in% c(state.name, "District of Columbia")) %>%
group_by(state) %>%
mutate(confirmed.cases = cumulative.confirmed.cases - lag(cumulative.confirmed.cases),
date = as.Date(date, format = "%m/%d/%y"),
confirmed.cases = replace_na(confirmed.cases, 0))
# fix negative cumulative cases
while (any(covid.confirmed$confirmed.cases < 0)) {
covid.death <- covid.death %>%
mutate(cumulative.confirmed.cases = ifelse(cumulative.confirmed.cases < lag(cumulative.confirmed.cases),
lag(cumulative.confirmed.cases), # if smaller than previous
cumulative.confirmed.cases), # if not
confirmed.cases = cumulative.confirmed.cases - lag(cumulative.confirmed.cases),
confirmed.cases = replace_na(confirmed.cases, 0))
}
covid.confirmed <- covid.confirmed.raw %>%
select(-c(UID, iso2, iso3, code3, FIPS, Admin2, Country_Region, Lat, Long_, Combined_Key)) %>%
rename(state = Province_State) %>%
group_by(state) %>% # Specify group indicator
summarise(across(everything(), sum)) %>% # Specify column
pivot_longer(-c(state),
names_to = "date",
values_to = "cumulative.confirmed.cases") %>%
filter(state %in% c(state.name, "District of Columbia")) %>%
group_by(state) %>%
mutate(confirmed.cases = cumulative.confirmed.cases - lag(cumulative.confirmed.cases),
date = as.Date(date, format = "%m/%d/%y"),
confirmed.cases = replace_na(confirmed.cases, 0))
# fix negative cumulative cases
while (any(covid.confirmed$confirmed.cases < 0)) {
covid.confirmed <- covid.confirmed %>%
mutate(cumulative.confirmed.cases = ifelse(cumulative.confirmed.cases < lag(cumulative.confirmed.cases),
lag(cumulative.confirmed.cases), # if smaller than previous
cumulative.confirmed.cases), # if not
confirmed.cases = cumulative.confirmed.cases - lag(cumulative.confirmed.cases),
confirmed.cases = replace_na(confirmed.cases, 0))
}
# combining death and confirmed into one dataset
covid <- covid.deaths %>% inner_join(covid.confirmed, by = c("state","date"))
View(covid.confirmed)
dates <- format(seq(from = as.Date("2020/04/13"), to = as.Date("2020/10/24"), by = "day"), "%m-%d-%Y")
date = "04-12-2020"
reports.raw <- read_csv(paste("./datasets/csse_covid_19_daily_reports_us/", date, ".csv", sep = ""))
report <- reports.raw %>%
select(-c(Country_Region, Last_Update, Lat, Long_, Confirmed, Deaths, FIPS, UID, ISO3)) %>%
rename(state = Province_State,
recovered.cases = Recovered,
active.cases = Active,
incident.rate = Incident_Rate, # positive results per 100,000 persons.
people.tested = People_Tested,
people.hospitalized = People_Hospitalized,
mortality.rate = Mortality_Rate,
testing.rate = Testing_Rate,
hospitalization.rate = Hospitalization_Rate) %>%
filter(state %in% c(state.name, "District of Columbia")) %>%
mutate(date = as.Date(date, format = "%m-%d-%y"),
# month = match(months(date), month.name),
incident.rate = incident.rate/1000,
# based on documentation (100k population)
testing.rate = testing.rate/1000) %>%
select(-c(people.hospitalized, hospitalization.rate, recovered.cases))
for (date in dates){
reports.raw <- read_csv(paste("./datasets/csse_covid_19_daily_reports_us/", date, ".csv", sep = ""))
rpt <- reports.raw %>%
select(-c(Country_Region, Last_Update, Lat, Long_, Confirmed, Deaths, FIPS, UID, ISO3)) %>%
rename(state = Province_State,
recovered.cases = Recovered,
active.cases = Active,
incident.rate = Incident_Rate,
people.tested = People_Tested,
people.hospitalized = People_Hospitalized,
mortality.rate = Mortality_Rate,
testing.rate = Testing_Rate,
hospitalization.rate = Hospitalization_Rate) %>%
filter(state %in% c(state.name, "District of Columbia")) %>%
mutate(date = as.Date(date, format = "%m-%d-%y"),
# month = match(months(date), month.name),
incident.rate = incident.rate/1000,
testing.rate = testing.rate/1000) %>%
select(-c(people.hospitalized, hospitalization.rate, recovered.cases))
### North Dekota has > 100% testing rate
report <- rbind(report, rpt)
}
reports <- report[c(1, 6, 7, 2, 3, 4, 5)][order(report$state, report$date),]
covid.time.series <- covid %>% full_join(reports, by = c("state","date"))
# covid.time.series <- reports
# View(covid.time.series)
#write.csv(covid.time.series, "E:/UCSD/2020-2021 Senior/PSYC 201 Project/CJHU Databse/covid time series version 1.csv")
